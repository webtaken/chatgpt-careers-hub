// This file is auto-generated by @hey-api/openapi-ts

export type Category = {
    readonly id: number;
    text: string;
    slug?: string | null;
};

export type CheckoutURL = {
    url: string;
};

export type CountSubscriptions = {
    count: number;
};

export type CreateLocation = {
    location: string;
    location_type: string;
};

export type CreateMultipleLocations = {
    locations: Array<CreateLocation>;
};

export type CreateMultipleTags = {
    tags: Array<(string)>;
};

export type CustomRegister = {
    username: string;
    email: string;
    password1: string;
    password2: string;
};

/**
 * User model w/o password
 */
export type CustomUserDetails = {
    readonly pk: number;
    /**
     * Designates whether the user can log into this admin site.
     */
    is_staff?: boolean;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    username: string;
    readonly email: string;
    first_name?: string;
    last_name?: string;
};

export type CustomerPortalURL = {
    url: string;
};

export type GetCheckoutURLRequest = {
    receipt_button_text?: string;
    receipt_thank_you_note?: string;
    redirect_url: string;
    embed?: boolean;
    email: string;
    user_id: number;
    variant_id: number;
    job_id: number;
};

export type HasAccess = {
    has_access: boolean;
};

/**
 * Serializer for JWT authentication.
 */
export type JWT = {
    access: string;
    refresh: string;
    user: CustomUserDetails;
};

export type Job = {
    readonly id: number;
    readonly created_at: string;
    readonly updated_at: string;
    company_name: string;
    title: string;
    slug?: string | null;
    description: string;
    remote?: boolean;
    apply_url?: string | null;
    apply_by_email?: boolean;
    apply_email?: string | null;
    company_email: string;
    pin_on_top?: boolean;
    verified?: boolean;
    visible?: boolean;
    user?: number | null;
    tags: Array<(number)>;
    location: Array<(number)>;
    category: Array<(number)>;
};

export type JobList = {
    readonly id: number;
    title: string;
    description: string;
    company_name: string;
    tags: Array<Tag>;
    verified?: boolean;
    location: Array<Location>;
    category: Array<Category>;
    slug?: string | null;
    readonly created_at: string;
    readonly updated_at: string;
};

export type JobRetrieve = {
    readonly id: number;
    tags: Array<Tag>;
    location: Array<Location>;
    category: Array<Category>;
    readonly created_at: string;
    readonly updated_at: string;
    company_name: string;
    title: string;
    slug?: string | null;
    description: string;
    remote?: boolean;
    apply_url?: string | null;
    apply_by_email?: boolean;
    apply_email?: string | null;
    company_email: string;
    pin_on_top?: boolean;
    verified?: boolean;
    visible?: boolean;
    user?: number | null;
};

export type Location = {
    readonly id: number;
    location: string;
    location_type: LocationTypeEnum;
    rank?: number | null;
};

export type LocationID = {
    id: number;
};

/**
 * * `remote` - Remote
 * * `region` - Region
 * * `country` - Country
 * * `city` - City
 */
export type LocationTypeEnum = 'remote' | 'region' | 'country' | 'city';

export type Login = {
    username?: string;
    email?: string;
    password: string;
};

export type Order = {
    readonly id: number;
    lemonsqueezy_id: string;
    order_id: number;
    order_number: number;
    name: string;
    email: string;
    status: string;
    status_formatted: string;
    refunded?: boolean;
    refunded_at: string;
    price?: string;
    receipt?: string | null;
    order_item_id?: number | null;
    user?: number | null;
    plan?: number | null;
};

export type PaginatedJobListList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<JobList>;
};

export type PaginatedLocationList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Location>;
};

export type PaginatedPostList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Post>;
};

export type PaginatedTagList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Tag>;
};

export type PatchedCategory = {
    readonly id?: number;
    text?: string;
    slug?: string | null;
};

/**
 * User model w/o password
 */
export type PatchedCustomUserDetails = {
    readonly pk?: number;
    /**
     * Designates whether the user can log into this admin site.
     */
    is_staff?: boolean;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    username?: string;
    readonly email?: string;
    first_name?: string;
    last_name?: string;
};

export type PatchedJob = {
    readonly id?: number;
    readonly created_at?: string;
    readonly updated_at?: string;
    company_name?: string;
    title?: string;
    slug?: string | null;
    description?: string;
    remote?: boolean;
    apply_url?: string | null;
    apply_by_email?: boolean;
    apply_email?: string | null;
    company_email?: string;
    pin_on_top?: boolean;
    verified?: boolean;
    visible?: boolean;
    user?: number | null;
    tags?: Array<(number)>;
    location?: Array<(number)>;
    category?: Array<(number)>;
};

export type PatchedLocation = {
    readonly id?: number;
    location?: string;
    location_type?: LocationTypeEnum;
    rank?: number | null;
};

export type PatchedPost = {
    readonly id?: number;
    type?: TypeEnum;
    title?: string;
    readonly slug?: string | null;
    body?: string;
    body_md?: string;
    external_url?: string | null;
    image_url?: string | null;
    is_published?: boolean;
    pinned?: boolean;
    metadata?: unknown;
    published_at?: string | null;
    readonly created_at?: string;
    readonly updated_at?: string;
};

export type PatchedTag = {
    readonly id?: number;
    text?: string;
};

export type Plan = {
    readonly id: number;
    product_id: number;
    product_name: string;
    variant_id: number;
    category: string;
    name: string;
    description: string;
    price: string;
    is_usage_based?: boolean;
    interval: string;
    interval_count: number;
    trial_interval?: string | null;
    trial_interval_count?: number | null;
    sort: number;
};

export type Post = {
    readonly id: number;
    type: TypeEnum;
    title: string;
    readonly slug: string | null;
    body: string;
    body_md: string;
    external_url?: string | null;
    image_url?: string | null;
    is_published?: boolean;
    pinned?: boolean;
    metadata?: unknown;
    published_at?: string | null;
    readonly created_at: string;
    readonly updated_at: string;
};

export type RestAuthDetail = {
    readonly detail: string;
};

export type SocialLogin = {
    access_token?: string;
    code?: string;
    id_token?: string;
};

export type Subscribe = {
    email: string;
};

export type Subscriber = {
    readonly id: number;
    email: string;
    is_active?: boolean;
    readonly created_at: string;
};

export type Tag = {
    readonly id: number;
    text: string;
};

export type TagID = {
    id: number;
};

export type TokenRefresh = {
    readonly access: string;
    refresh: string;
};

export type TokenVerify = {
    token: string;
};

/**
 * * `news` - News
 * * `training` - Training
 * * `promo` - Promo
 * * `other` - Other
 */
export type TypeEnum = 'news' | 'training' | 'promo' | 'other';

export type VerifyEmail = {
    key: string;
};

export type ApiAuthGoogleCreateData = {
    requestBody?: SocialLogin;
};

export type ApiAuthGoogleCreateResponse = SocialLogin;

export type ApiAuthLoginCreateData = {
    requestBody: Login;
};

export type ApiAuthLoginCreateResponse = JWT;

export type ApiAuthLogoutCreateResponse = RestAuthDetail;

export type ApiAuthRegisterCreateData = {
    requestBody: CustomRegister;
};

export type ApiAuthRegisterCreateResponse = JWT;

export type ApiAuthRegisterVerifyEmailCreateData = {
    requestBody: VerifyEmail;
};

export type ApiAuthRegisterVerifyEmailCreateResponse = RestAuthDetail;

export type ApiAuthTokenRefreshCreateData = {
    requestBody: TokenRefresh;
};

export type ApiAuthTokenRefreshCreateResponse = TokenRefresh;

export type ApiAuthTokenVerifyCreateData = {
    requestBody: TokenVerify;
};

export type ApiAuthTokenVerifyCreateResponse = TokenVerify;

export type ApiAuthUserRetrieveResponse = CustomUserDetails;

export type ApiAuthUserUpdateData = {
    requestBody: CustomUserDetails;
};

export type ApiAuthUserUpdateResponse = CustomUserDetails;

export type ApiAuthUserPartialUpdateData = {
    requestBody?: PatchedCustomUserDetails;
};

export type ApiAuthUserPartialUpdateResponse = CustomUserDetails;

export type ApiBillingWebhookCreateResponse = unknown;

export type ApiCategoriesListResponse = Array<Category>;

export type ApiCategoriesCreateData = {
    requestBody: Category;
};

export type ApiCategoriesCreateResponse = Category;

export type ApiCategoriesRetrieveData = {
    /**
     * A unique integer value identifying this category.
     */
    id: number;
};

export type ApiCategoriesRetrieveResponse = Category;

export type ApiCategoriesUpdateData = {
    /**
     * A unique integer value identifying this category.
     */
    id: number;
    requestBody: Category;
};

export type ApiCategoriesUpdateResponse = Category;

export type ApiCategoriesPartialUpdateData = {
    /**
     * A unique integer value identifying this category.
     */
    id: number;
    requestBody?: PatchedCategory;
};

export type ApiCategoriesPartialUpdateResponse = Category;

export type ApiCategoriesDestroyData = {
    /**
     * A unique integer value identifying this category.
     */
    id: number;
};

export type ApiCategoriesDestroyResponse = void;

export type ApiJobsListResponse = Array<JobList>;

export type ApiJobsCreateData = {
    requestBody: Job;
};

export type ApiJobsCreateResponse = Job;

export type ApiJobsListListData = {
    category?: Array<(number)>;
    categoryText?: string;
    location?: Array<(number)>;
    locationLocation?: string;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    slug?: string;
    tags?: Array<(number)>;
    tagsText?: string;
    title?: string;
};

export type ApiJobsListListResponse = PaginatedJobListList;

export type ApiJobsRetrieveData = {
    /**
     * A unique integer value identifying this job.
     */
    id: number;
};

export type ApiJobsRetrieveResponse = JobRetrieve;

export type ApiJobsUpdateData = {
    /**
     * A unique integer value identifying this job.
     */
    id: number;
    requestBody: Job;
};

export type ApiJobsUpdateResponse = Job;

export type ApiJobsPartialUpdateData = {
    /**
     * A unique integer value identifying this job.
     */
    id: number;
    requestBody?: PatchedJob;
};

export type ApiJobsPartialUpdateResponse = Job;

export type ApiJobsDestroyData = {
    /**
     * A unique integer value identifying this job.
     */
    id: number;
};

export type ApiJobsDestroyResponse = void;

export type ApiJobsBySlugRetrieveData = {
    slug: string;
};

export type ApiJobsBySlugRetrieveResponse = JobRetrieve;

export type ApiLocationsListResponse = Array<Location>;

export type ApiLocationsCreateData = {
    requestBody: Location;
};

export type ApiLocationsCreateResponse = Location;

export type ApiLocationsListListData = {
    location?: string;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
};

export type ApiLocationsListListResponse = PaginatedLocationList;

export type ApiLocationsListBulkRetrieveCreateData = {
    location?: string;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    requestBody?: {
        /**
         * List of tag IDs to retrieve
         */
        ids: Array<(number)>;
    };
};

export type ApiLocationsListBulkRetrieveCreateResponse = PaginatedLocationList;

export type ApiLocationsRetrieveData = {
    /**
     * A unique integer value identifying this location.
     */
    id: number;
};

export type ApiLocationsRetrieveResponse = Location;

export type ApiLocationsUpdateData = {
    /**
     * A unique integer value identifying this location.
     */
    id: number;
    requestBody: Location;
};

export type ApiLocationsUpdateResponse = Location;

export type ApiLocationsPartialUpdateData = {
    /**
     * A unique integer value identifying this location.
     */
    id: number;
    requestBody?: PatchedLocation;
};

export type ApiLocationsPartialUpdateResponse = Location;

export type ApiLocationsDestroyData = {
    /**
     * A unique integer value identifying this location.
     */
    id: number;
};

export type ApiLocationsDestroyResponse = void;

export type ApiLocationsCreateLocationsCreateData = {
    requestBody: CreateMultipleLocations;
};

export type ApiLocationsCreateLocationsCreateResponse = Array<LocationID>;

export type ApiNewsletterPostsListData = {
    isPublished?: boolean;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    pinned?: boolean;
    /**
     * A search term.
     */
    search?: string;
    /**
     * * `news` - News
     * * `training` - Training
     * * `promo` - Promo
     * * `other` - Other
     */
    type?: 'news' | 'other' | 'promo' | 'training';
};

export type ApiNewsletterPostsListResponse = PaginatedPostList;

export type ApiNewsletterPostsCreateData = {
    requestBody: Post;
};

export type ApiNewsletterPostsCreateResponse = Post;

export type ApiNewsletterPostsRetrieveData = {
    /**
     * A unique integer value identifying this post.
     */
    id: number;
};

export type ApiNewsletterPostsRetrieveResponse = Post;

export type ApiNewsletterPostsUpdateData = {
    /**
     * A unique integer value identifying this post.
     */
    id: number;
    requestBody: Post;
};

export type ApiNewsletterPostsUpdateResponse = Post;

export type ApiNewsletterPostsPartialUpdateData = {
    /**
     * A unique integer value identifying this post.
     */
    id: number;
    requestBody?: PatchedPost;
};

export type ApiNewsletterPostsPartialUpdateResponse = Post;

export type ApiNewsletterPostsDestroyData = {
    /**
     * A unique integer value identifying this post.
     */
    id: number;
};

export type ApiNewsletterPostsDestroyResponse = void;

export type ApiNewsletterPostsBySlugRetrieveData = {
    slug: string;
};

export type ApiNewsletterPostsBySlugRetrieveResponse = Post;

export type ApiNewsletterPostsPublishedRetrieveResponse = Post;

export type ApiNewsletterSubscribersListResponse = Array<Subscriber>;

export type ApiNewsletterSubscribersCreateData = {
    requestBody: Subscriber;
};

export type ApiNewsletterSubscribersCreateResponse = Subscriber;

export type ApiOrderRetrieveData = {
    /**
     * A unique integer value identifying this order.
     */
    id: number;
};

export type ApiOrderRetrieveResponse = Order;

export type ApiOrderGetCustomerReceiptRetrieveData = {
    /**
     * A unique integer value identifying this order.
     */
    id: number;
};

export type ApiOrderGetCustomerReceiptRetrieveResponse = CustomerPortalURL;

export type ApiOrderGetCheckoutUrlCreateData = {
    requestBody: GetCheckoutURLRequest;
};

export type ApiOrderGetCheckoutUrlCreateResponse = CheckoutURL;

export type ApiOrderGetUserOrderRetrieveData = {
    /**
     * The user id requesting his subscriptions
     */
    userId: number;
};

export type ApiOrderGetUserOrderRetrieveResponse = Order;

export type ApiOrderUserHasAccessRetrieveResponse = HasAccess;

export type ApiPlansListResponse = Array<Plan>;

export type ApiPlansRetrieveData = {
    /**
     * A unique integer value identifying this plan.
     */
    id: number;
};

export type ApiPlansRetrieveResponse = Plan;

export type ApiSubscriptionsGetCountSubscriptionsRetrieveResponse = CountSubscriptions;

export type ApiSubscriptionsSubscribeCreateData = {
    requestBody: Subscribe;
};

export type ApiSubscriptionsSubscribeCreateResponse = {
    [key: string]: unknown;
};

export type ApiTagsListResponse = Array<Tag>;

export type ApiTagsCreateData = {
    requestBody: Tag;
};

export type ApiTagsCreateResponse = Tag;

export type ApiTagsListListData = {
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    text?: string;
};

export type ApiTagsListListResponse = PaginatedTagList;

export type ApiTagsListBulkRetrieveCreateData = {
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    requestBody?: {
        /**
         * List of tag IDs to retrieve
         */
        ids: Array<(number)>;
    };
    text?: string;
};

export type ApiTagsListBulkRetrieveCreateResponse = PaginatedTagList;

export type ApiTagsListTopTagsListData = {
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page.
     */
    pageSize?: number;
    text?: string;
};

export type ApiTagsListTopTagsListResponse = PaginatedTagList;

export type ApiTagsRetrieveData = {
    /**
     * A unique integer value identifying this tag.
     */
    id: number;
};

export type ApiTagsRetrieveResponse = Tag;

export type ApiTagsUpdateData = {
    /**
     * A unique integer value identifying this tag.
     */
    id: number;
    requestBody: Tag;
};

export type ApiTagsUpdateResponse = Tag;

export type ApiTagsPartialUpdateData = {
    /**
     * A unique integer value identifying this tag.
     */
    id: number;
    requestBody?: PatchedTag;
};

export type ApiTagsPartialUpdateResponse = Tag;

export type ApiTagsDestroyData = {
    /**
     * A unique integer value identifying this tag.
     */
    id: number;
};

export type ApiTagsDestroyResponse = void;

export type ApiTagsCreateTagsCreateData = {
    requestBody: CreateMultipleTags;
};

export type ApiTagsCreateTagsCreateResponse = Array<TagID>;

export type ApiUsersWebhookCreateResponse = unknown;

export type $OpenApiTs = {
    '/api/auth/google/': {
        post: {
            req: ApiAuthGoogleCreateData;
            res: {
                200: SocialLogin;
            };
        };
    };
    '/api/auth/login/': {
        post: {
            req: ApiAuthLoginCreateData;
            res: {
                200: JWT;
            };
        };
    };
    '/api/auth/logout/': {
        post: {
            res: {
                200: RestAuthDetail;
            };
        };
    };
    '/api/auth/register/': {
        post: {
            req: ApiAuthRegisterCreateData;
            res: {
                201: JWT;
            };
        };
    };
    '/api/auth/register/verify-email': {
        post: {
            req: ApiAuthRegisterVerifyEmailCreateData;
            res: {
                200: RestAuthDetail;
            };
        };
    };
    '/api/auth/token/refresh/': {
        post: {
            req: ApiAuthTokenRefreshCreateData;
            res: {
                200: TokenRefresh;
            };
        };
    };
    '/api/auth/token/verify/': {
        post: {
            req: ApiAuthTokenVerifyCreateData;
            res: {
                200: TokenVerify;
            };
        };
    };
    '/api/auth/user/': {
        get: {
            res: {
                200: CustomUserDetails;
            };
        };
        put: {
            req: ApiAuthUserUpdateData;
            res: {
                200: CustomUserDetails;
            };
        };
        patch: {
            req: ApiAuthUserPartialUpdateData;
            res: {
                200: CustomUserDetails;
            };
        };
    };
    '/api/billing/webhook': {
        post: {
            res: {
                /**
                 * No response body
                 */
                200: unknown;
            };
        };
    };
    '/api/categories/': {
        get: {
            res: {
                200: Array<Category>;
            };
        };
        post: {
            req: ApiCategoriesCreateData;
            res: {
                201: Category;
            };
        };
    };
    '/api/categories/{id}/': {
        get: {
            req: ApiCategoriesRetrieveData;
            res: {
                200: Category;
            };
        };
        put: {
            req: ApiCategoriesUpdateData;
            res: {
                200: Category;
            };
        };
        patch: {
            req: ApiCategoriesPartialUpdateData;
            res: {
                200: Category;
            };
        };
        delete: {
            req: ApiCategoriesDestroyData;
            res: {
                /**
                 * No response body
                 */
                204: void;
            };
        };
    };
    '/api/jobs/': {
        get: {
            res: {
                200: Array<JobList>;
            };
        };
        post: {
            req: ApiJobsCreateData;
            res: {
                201: Job;
            };
        };
    };
    '/api/jobs-list/': {
        get: {
            req: ApiJobsListListData;
            res: {
                200: PaginatedJobListList;
            };
        };
    };
    '/api/jobs/{id}/': {
        get: {
            req: ApiJobsRetrieveData;
            res: {
                200: JobRetrieve;
            };
        };
        put: {
            req: ApiJobsUpdateData;
            res: {
                200: Job;
            };
        };
        patch: {
            req: ApiJobsPartialUpdateData;
            res: {
                200: Job;
            };
        };
        delete: {
            req: ApiJobsDestroyData;
            res: {
                /**
                 * No response body
                 */
                204: void;
            };
        };
    };
    '/api/jobs/by-slug/{slug}/': {
        get: {
            req: ApiJobsBySlugRetrieveData;
            res: {
                200: JobRetrieve;
            };
        };
    };
    '/api/locations/': {
        get: {
            res: {
                200: Array<Location>;
            };
        };
        post: {
            req: ApiLocationsCreateData;
            res: {
                201: Location;
            };
        };
    };
    '/api/locations-list/': {
        get: {
            req: ApiLocationsListListData;
            res: {
                200: PaginatedLocationList;
            };
        };
    };
    '/api/locations-list/bulk-retrieve/': {
        post: {
            req: ApiLocationsListBulkRetrieveCreateData;
            res: {
                200: PaginatedLocationList;
            };
        };
    };
    '/api/locations/{id}/': {
        get: {
            req: ApiLocationsRetrieveData;
            res: {
                200: Location;
            };
        };
        put: {
            req: ApiLocationsUpdateData;
            res: {
                200: Location;
            };
        };
        patch: {
            req: ApiLocationsPartialUpdateData;
            res: {
                200: Location;
            };
        };
        delete: {
            req: ApiLocationsDestroyData;
            res: {
                /**
                 * No response body
                 */
                204: void;
            };
        };
    };
    '/api/locations/create_locations/': {
        post: {
            req: ApiLocationsCreateLocationsCreateData;
            res: {
                201: Array<LocationID>;
            };
        };
    };
    '/api/newsletter/posts/': {
        get: {
            req: ApiNewsletterPostsListData;
            res: {
                200: PaginatedPostList;
            };
        };
        post: {
            req: ApiNewsletterPostsCreateData;
            res: {
                201: Post;
            };
        };
    };
    '/api/newsletter/posts/{id}/': {
        get: {
            req: ApiNewsletterPostsRetrieveData;
            res: {
                200: Post;
            };
        };
        put: {
            req: ApiNewsletterPostsUpdateData;
            res: {
                200: Post;
            };
        };
        patch: {
            req: ApiNewsletterPostsPartialUpdateData;
            res: {
                200: Post;
            };
        };
        delete: {
            req: ApiNewsletterPostsDestroyData;
            res: {
                /**
                 * No response body
                 */
                204: void;
            };
        };
    };
    '/api/newsletter/posts/by-slug/{slug}/': {
        get: {
            req: ApiNewsletterPostsBySlugRetrieveData;
            res: {
                200: Post;
            };
        };
    };
    '/api/newsletter/posts/published/': {
        get: {
            res: {
                200: Post;
            };
        };
    };
    '/api/newsletter/subscribers/': {
        get: {
            res: {
                200: Array<Subscriber>;
            };
        };
        post: {
            req: ApiNewsletterSubscribersCreateData;
            res: {
                201: Subscriber;
            };
        };
    };
    '/api/order/{id}/': {
        get: {
            req: ApiOrderRetrieveData;
            res: {
                200: Order;
            };
        };
    };
    '/api/order/{id}/get_customer_receipt/': {
        get: {
            req: ApiOrderGetCustomerReceiptRetrieveData;
            res: {
                200: CustomerPortalURL;
            };
        };
    };
    '/api/order/get_checkout_url/': {
        post: {
            req: ApiOrderGetCheckoutUrlCreateData;
            res: {
                200: CheckoutURL;
            };
        };
    };
    '/api/order/get_user_order/': {
        get: {
            req: ApiOrderGetUserOrderRetrieveData;
            res: {
                200: Order;
            };
        };
    };
    '/api/order/user_has_access/': {
        get: {
            res: {
                200: HasAccess;
            };
        };
    };
    '/api/plans/': {
        get: {
            res: {
                200: Array<Plan>;
            };
        };
    };
    '/api/plans/{id}/': {
        get: {
            req: ApiPlansRetrieveData;
            res: {
                200: Plan;
            };
        };
    };
    '/api/subscriptions/get_count_subscriptions/': {
        get: {
            res: {
                200: CountSubscriptions;
            };
        };
    };
    '/api/subscriptions/subscribe/': {
        post: {
            req: ApiSubscriptionsSubscribeCreateData;
            res: {
                200: {
                    [key: string]: unknown;
                };
                400: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/api/tags/': {
        get: {
            res: {
                200: Array<Tag>;
            };
        };
        post: {
            req: ApiTagsCreateData;
            res: {
                201: Tag;
            };
        };
    };
    '/api/tags-list/': {
        get: {
            req: ApiTagsListListData;
            res: {
                200: PaginatedTagList;
            };
        };
    };
    '/api/tags-list/bulk-retrieve/': {
        post: {
            req: ApiTagsListBulkRetrieveCreateData;
            res: {
                200: PaginatedTagList;
            };
        };
    };
    '/api/tags-list/top-tags/': {
        get: {
            req: ApiTagsListTopTagsListData;
            res: {
                200: PaginatedTagList;
            };
        };
    };
    '/api/tags/{id}/': {
        get: {
            req: ApiTagsRetrieveData;
            res: {
                200: Tag;
            };
        };
        put: {
            req: ApiTagsUpdateData;
            res: {
                200: Tag;
            };
        };
        patch: {
            req: ApiTagsPartialUpdateData;
            res: {
                200: Tag;
            };
        };
        delete: {
            req: ApiTagsDestroyData;
            res: {
                /**
                 * No response body
                 */
                204: void;
            };
        };
    };
    '/api/tags/create_tags/': {
        post: {
            req: ApiTagsCreateTagsCreateData;
            res: {
                201: Array<TagID>;
            };
        };
    };
    '/api/users/webhook': {
        post: {
            res: {
                /**
                 * No response body
                 */
                200: unknown;
            };
        };
    };
};