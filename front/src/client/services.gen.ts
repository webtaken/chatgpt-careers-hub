// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ApiAuthGoogleCreateData, ApiAuthGoogleCreateResponse, ApiAuthLoginCreateData, ApiAuthLoginCreateResponse, ApiAuthLogoutCreateResponse, ApiAuthRegisterCreateData, ApiAuthRegisterCreateResponse, ApiAuthRegisterVerifyEmailCreateData, ApiAuthRegisterVerifyEmailCreateResponse, ApiAuthTokenRefreshCreateData, ApiAuthTokenRefreshCreateResponse, ApiAuthTokenVerifyCreateData, ApiAuthTokenVerifyCreateResponse, ApiAuthUserRetrieveResponse, ApiAuthUserUpdateData, ApiAuthUserUpdateResponse, ApiAuthUserPartialUpdateData, ApiAuthUserPartialUpdateResponse, ApiBillingWebhookCreateResponse, ApiCategoriesListResponse, ApiCategoriesCreateData, ApiCategoriesCreateResponse, ApiCategoriesRetrieveData, ApiCategoriesRetrieveResponse, ApiCategoriesUpdateData, ApiCategoriesUpdateResponse, ApiCategoriesPartialUpdateData, ApiCategoriesPartialUpdateResponse, ApiCategoriesDestroyData, ApiCategoriesDestroyResponse, ApiJobsListResponse, ApiJobsCreateData, ApiJobsCreateResponse, ApiJobsListListData, ApiJobsListListResponse, ApiJobsRetrieveData, ApiJobsRetrieveResponse, ApiJobsUpdateData, ApiJobsUpdateResponse, ApiJobsPartialUpdateData, ApiJobsPartialUpdateResponse, ApiJobsDestroyData, ApiJobsDestroyResponse, ApiJobsBySlugRetrieveData, ApiJobsBySlugRetrieveResponse, ApiLocationsListResponse, ApiLocationsCreateData, ApiLocationsCreateResponse, ApiLocationsListListData, ApiLocationsListListResponse, ApiLocationsListBulkRetrieveCreateData, ApiLocationsListBulkRetrieveCreateResponse, ApiLocationsRetrieveData, ApiLocationsRetrieveResponse, ApiLocationsUpdateData, ApiLocationsUpdateResponse, ApiLocationsPartialUpdateData, ApiLocationsPartialUpdateResponse, ApiLocationsDestroyData, ApiLocationsDestroyResponse, ApiLocationsCreateLocationsCreateData, ApiLocationsCreateLocationsCreateResponse, ApiNewsletterPostsListData, ApiNewsletterPostsListResponse, ApiNewsletterPostsCreateData, ApiNewsletterPostsCreateResponse, ApiNewsletterPostsRetrieveData, ApiNewsletterPostsRetrieveResponse, ApiNewsletterPostsUpdateData, ApiNewsletterPostsUpdateResponse, ApiNewsletterPostsPartialUpdateData, ApiNewsletterPostsPartialUpdateResponse, ApiNewsletterPostsDestroyData, ApiNewsletterPostsDestroyResponse, ApiNewsletterPostsBySlugRetrieveData, ApiNewsletterPostsBySlugRetrieveResponse, ApiNewsletterPostsPublishedRetrieveResponse, ApiNewsletterSubscribersListResponse, ApiNewsletterSubscribersCreateData, ApiNewsletterSubscribersCreateResponse, ApiOrderRetrieveData, ApiOrderRetrieveResponse, ApiOrderGetCustomerReceiptRetrieveData, ApiOrderGetCustomerReceiptRetrieveResponse, ApiOrderGetCheckoutUrlCreateData, ApiOrderGetCheckoutUrlCreateResponse, ApiOrderGetUserOrderRetrieveData, ApiOrderGetUserOrderRetrieveResponse, ApiOrderUserHasAccessRetrieveResponse, ApiPlansListResponse, ApiPlansRetrieveData, ApiPlansRetrieveResponse, ApiSubscriptionsGetCountSubscriptionsRetrieveResponse, ApiSubscriptionsSubscribeCreateData, ApiSubscriptionsSubscribeCreateResponse, ApiTagsListResponse, ApiTagsCreateData, ApiTagsCreateResponse, ApiTagsListListData, ApiTagsListListResponse, ApiTagsListBulkRetrieveCreateData, ApiTagsListBulkRetrieveCreateResponse, ApiTagsListTopTagsListData, ApiTagsListTopTagsListResponse, ApiTagsRetrieveData, ApiTagsRetrieveResponse, ApiTagsUpdateData, ApiTagsUpdateResponse, ApiTagsPartialUpdateData, ApiTagsPartialUpdateResponse, ApiTagsDestroyData, ApiTagsDestroyResponse, ApiTagsCreateTagsCreateData, ApiTagsCreateTagsCreateResponse, ApiUsersWebhookCreateResponse } from './types.gen';

/**
 * class used for social authentications
 * example usage for facebook with access_token
 * -------------
 * from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
 *
 * class FacebookLogin(SocialLoginView):
 * adapter_class = FacebookOAuth2Adapter
 * -------------
 *
 * example usage for facebook with code
 *
 * -------------
 * from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
 * from allauth.socialaccount.providers.oauth2.client import OAuth2Client
 *
 * class FacebookLogin(SocialLoginView):
 * adapter_class = FacebookOAuth2Adapter
 * client_class = OAuth2Client
 * callback_url = 'localhost:8000'
 * -------------
 * @param data The data for the request.
 * @param data.requestBody
 * @returns SocialLogin
 * @throws ApiError
 */
export const apiAuthGoogleCreate = (data: ApiAuthGoogleCreateData = {}): CancelablePromise<ApiAuthGoogleCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/google/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Check the credentials and return the REST Token
 * if the credentials are valid and authenticated.
 * Calls Django Auth login method to register User ID
 * in Django session framework
 *
 * Accept the following POST parameters: username, password
 * Return the REST Framework Token Object's key.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns JWT
 * @throws ApiError
 */
export const apiAuthLoginCreate = (data: ApiAuthLoginCreateData): CancelablePromise<ApiAuthLoginCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/login/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Calls Django logout method and delete the Token object
 * assigned to the current User object.
 *
 * Accepts/Returns nothing.
 * @returns RestAuthDetail
 * @throws ApiError
 */
export const apiAuthLogoutCreate = (): CancelablePromise<ApiAuthLogoutCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/logout/'
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns JWT
 * @throws ApiError
 */
export const apiAuthRegisterCreate = (data: ApiAuthRegisterCreateData): CancelablePromise<ApiAuthRegisterCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/register/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns RestAuthDetail
 * @throws ApiError
 */
export const apiAuthRegisterVerifyEmailCreate = (data: ApiAuthRegisterVerifyEmailCreateData): CancelablePromise<ApiAuthRegisterVerifyEmailCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/register/verify-email',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
 * token if the refresh token is valid.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns TokenRefresh
 * @throws ApiError
 */
export const apiAuthTokenRefreshCreate = (data: ApiAuthTokenRefreshCreateData): CancelablePromise<ApiAuthTokenRefreshCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/token/refresh/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Takes a token and indicates if it is valid.  This view provides no
 * information about a token's fitness for a particular use.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns TokenVerify
 * @throws ApiError
 */
export const apiAuthTokenVerifyCreate = (data: ApiAuthTokenVerifyCreateData): CancelablePromise<ApiAuthTokenVerifyCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/auth/token/verify/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Reads and updates UserModel fields
 * Accepts GET, PUT, PATCH methods.
 *
 * Default accepted fields: username, first_name, last_name
 * Default display fields: pk, username, email, first_name, last_name
 * Read-only fields: pk, email
 *
 * Returns UserModel fields.
 * @returns CustomUserDetails
 * @throws ApiError
 */
export const apiAuthUserRetrieve = (): CancelablePromise<ApiAuthUserRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/auth/user/'
}); };

/**
 * Reads and updates UserModel fields
 * Accepts GET, PUT, PATCH methods.
 *
 * Default accepted fields: username, first_name, last_name
 * Default display fields: pk, username, email, first_name, last_name
 * Read-only fields: pk, email
 *
 * Returns UserModel fields.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CustomUserDetails
 * @throws ApiError
 */
export const apiAuthUserUpdate = (data: ApiAuthUserUpdateData): CancelablePromise<ApiAuthUserUpdateResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/auth/user/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Reads and updates UserModel fields
 * Accepts GET, PUT, PATCH methods.
 *
 * Default accepted fields: username, first_name, last_name
 * Default display fields: pk, username, email, first_name, last_name
 * Read-only fields: pk, email
 *
 * Returns UserModel fields.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CustomUserDetails
 * @throws ApiError
 */
export const apiAuthUserPartialUpdate = (data: ApiAuthUserPartialUpdateData = {}): CancelablePromise<ApiAuthUserPartialUpdateResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/auth/user/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Handle events happening on lemonsqueezy (subscription created and updated).
 * @returns unknown No response body
 * @throws ApiError
 */
export const apiBillingWebhookCreate = (): CancelablePromise<ApiBillingWebhookCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/billing/webhook'
}); };

/**
 * @returns Category
 * @throws ApiError
 */
export const apiCategoriesList = (): CancelablePromise<ApiCategoriesListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/categories/'
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Category
 * @throws ApiError
 */
export const apiCategoriesCreate = (data: ApiCategoriesCreateData): CancelablePromise<ApiCategoriesCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/categories/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this category.
 * @returns Category
 * @throws ApiError
 */
export const apiCategoriesRetrieve = (data: ApiCategoriesRetrieveData): CancelablePromise<ApiCategoriesRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/categories/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this category.
 * @param data.requestBody
 * @returns Category
 * @throws ApiError
 */
export const apiCategoriesUpdate = (data: ApiCategoriesUpdateData): CancelablePromise<ApiCategoriesUpdateResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/categories/{id}/',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this category.
 * @param data.requestBody
 * @returns Category
 * @throws ApiError
 */
export const apiCategoriesPartialUpdate = (data: ApiCategoriesPartialUpdateData): CancelablePromise<ApiCategoriesPartialUpdateResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/categories/{id}/',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this category.
 * @returns void No response body
 * @throws ApiError
 */
export const apiCategoriesDestroy = (data: ApiCategoriesDestroyData): CancelablePromise<ApiCategoriesDestroyResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/categories/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * @returns JobList
 * @throws ApiError
 */
export const apiJobsList = (): CancelablePromise<ApiJobsListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/jobs/'
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Job
 * @throws ApiError
 */
export const apiJobsCreate = (data: ApiJobsCreateData): CancelablePromise<ApiJobsCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/jobs/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.category
 * @param data.categoryText
 * @param data.location
 * @param data.locationLocation
 * @param data.page A page number within the paginated result set.
 * @param data.pageSize Number of results to return per page.
 * @param data.slug
 * @param data.tags
 * @param data.tagsText
 * @param data.title
 * @returns PaginatedJobListList
 * @throws ApiError
 */
export const apiJobsListList = (data: ApiJobsListListData = {}): CancelablePromise<ApiJobsListListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/jobs-list/',
    query: {
        category: data.category,
        category__text: data.categoryText,
        location: data.location,
        location__location: data.locationLocation,
        page: data.page,
        page_size: data.pageSize,
        slug: data.slug,
        tags: data.tags,
        tags__text: data.tagsText,
        title: data.title
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this job.
 * @returns JobRetrieve
 * @throws ApiError
 */
export const apiJobsRetrieve = (data: ApiJobsRetrieveData): CancelablePromise<ApiJobsRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/jobs/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this job.
 * @param data.requestBody
 * @returns Job
 * @throws ApiError
 */
export const apiJobsUpdate = (data: ApiJobsUpdateData): CancelablePromise<ApiJobsUpdateResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/jobs/{id}/',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this job.
 * @param data.requestBody
 * @returns Job
 * @throws ApiError
 */
export const apiJobsPartialUpdate = (data: ApiJobsPartialUpdateData): CancelablePromise<ApiJobsPartialUpdateResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/jobs/{id}/',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this job.
 * @returns void No response body
 * @throws ApiError
 */
export const apiJobsDestroy = (data: ApiJobsDestroyData): CancelablePromise<ApiJobsDestroyResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/jobs/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * @param data The data for the request.
 * @param data.slug
 * @returns JobRetrieve
 * @throws ApiError
 */
export const apiJobsBySlugRetrieve = (data: ApiJobsBySlugRetrieveData): CancelablePromise<ApiJobsBySlugRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/jobs/by-slug/{slug}/',
    path: {
        slug: data.slug
    }
}); };

/**
 * @returns Location
 * @throws ApiError
 */
export const apiLocationsList = (): CancelablePromise<ApiLocationsListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/locations/'
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Location
 * @throws ApiError
 */
export const apiLocationsCreate = (data: ApiLocationsCreateData): CancelablePromise<ApiLocationsCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/locations/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.location
 * @param data.page A page number within the paginated result set.
 * @param data.pageSize Number of results to return per page.
 * @returns PaginatedLocationList
 * @throws ApiError
 */
export const apiLocationsListList = (data: ApiLocationsListListData = {}): CancelablePromise<ApiLocationsListListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/locations-list/',
    query: {
        location: data.location,
        page: data.page,
        page_size: data.pageSize
    }
}); };

/**
 * Retrieve multiple tags by their IDs
 * @param data The data for the request.
 * @param data.location
 * @param data.page A page number within the paginated result set.
 * @param data.pageSize Number of results to return per page.
 * @param data.requestBody
 * @returns PaginatedLocationList
 * @throws ApiError
 */
export const apiLocationsListBulkRetrieveCreate = (data: ApiLocationsListBulkRetrieveCreateData = {}): CancelablePromise<ApiLocationsListBulkRetrieveCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/locations-list/bulk-retrieve/',
    query: {
        location: data.location,
        page: data.page,
        page_size: data.pageSize
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this location.
 * @returns Location
 * @throws ApiError
 */
export const apiLocationsRetrieve = (data: ApiLocationsRetrieveData): CancelablePromise<ApiLocationsRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/locations/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this location.
 * @param data.requestBody
 * @returns Location
 * @throws ApiError
 */
export const apiLocationsUpdate = (data: ApiLocationsUpdateData): CancelablePromise<ApiLocationsUpdateResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/locations/{id}/',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this location.
 * @param data.requestBody
 * @returns Location
 * @throws ApiError
 */
export const apiLocationsPartialUpdate = (data: ApiLocationsPartialUpdateData): CancelablePromise<ApiLocationsPartialUpdateResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/locations/{id}/',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this location.
 * @returns void No response body
 * @throws ApiError
 */
export const apiLocationsDestroy = (data: ApiLocationsDestroyData): CancelablePromise<ApiLocationsDestroyResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/locations/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * Create multiple locations if they don't exist, or retrieve their IDs if they do.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns LocationID
 * @throws ApiError
 */
export const apiLocationsCreateLocationsCreate = (data: ApiLocationsCreateLocationsCreateData): CancelablePromise<ApiLocationsCreateLocationsCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/locations/create_locations/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * ViewSet for managing newsletter posts with full CRUD operations.
 *
 * Provides:
 * - GET /newsletter/posts/ - List all posts
 * - POST /newsletter/posts/ - Create a new post
 * - GET /newsletter/posts/{id}/ - Retrieve a specific post
 * - PUT /newsletter/posts/{id}/ - Update a specific post (full update)
 * - PATCH /newsletter/posts/{id}/ - Partially update a specific post
 * - DELETE /newsletter/posts/{id}/ - Delete a specific post
 * - GET /newsletter/posts/published/ - List only published posts (public)
 * - GET /newsletter/posts/by-slug/{slug}/ - Retrieve post by slug (public)
 * @param data The data for the request.
 * @param data.isPublished
 * @param data.page A page number within the paginated result set.
 * @param data.pageSize Number of results to return per page.
 * @param data.pinned
 * @param data.search A search term.
 * @param data.type * `news` - News
 * * `training` - Training
 * * `promo` - Promo
 * * `other` - Other
 * @returns PaginatedPostList
 * @throws ApiError
 */
export const apiNewsletterPostsList = (data: ApiNewsletterPostsListData = {}): CancelablePromise<ApiNewsletterPostsListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/newsletter/posts/',
    query: {
        is_published: data.isPublished,
        page: data.page,
        page_size: data.pageSize,
        pinned: data.pinned,
        search: data.search,
        type: data.type
    }
}); };

/**
 * ViewSet for managing newsletter posts with full CRUD operations.
 *
 * Provides:
 * - GET /newsletter/posts/ - List all posts
 * - POST /newsletter/posts/ - Create a new post
 * - GET /newsletter/posts/{id}/ - Retrieve a specific post
 * - PUT /newsletter/posts/{id}/ - Update a specific post (full update)
 * - PATCH /newsletter/posts/{id}/ - Partially update a specific post
 * - DELETE /newsletter/posts/{id}/ - Delete a specific post
 * - GET /newsletter/posts/published/ - List only published posts (public)
 * - GET /newsletter/posts/by-slug/{slug}/ - Retrieve post by slug (public)
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Post
 * @throws ApiError
 */
export const apiNewsletterPostsCreate = (data: ApiNewsletterPostsCreateData): CancelablePromise<ApiNewsletterPostsCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/newsletter/posts/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * ViewSet for managing newsletter posts with full CRUD operations.
 *
 * Provides:
 * - GET /newsletter/posts/ - List all posts
 * - POST /newsletter/posts/ - Create a new post
 * - GET /newsletter/posts/{id}/ - Retrieve a specific post
 * - PUT /newsletter/posts/{id}/ - Update a specific post (full update)
 * - PATCH /newsletter/posts/{id}/ - Partially update a specific post
 * - DELETE /newsletter/posts/{id}/ - Delete a specific post
 * - GET /newsletter/posts/published/ - List only published posts (public)
 * - GET /newsletter/posts/by-slug/{slug}/ - Retrieve post by slug (public)
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this post.
 * @returns Post
 * @throws ApiError
 */
export const apiNewsletterPostsRetrieve = (data: ApiNewsletterPostsRetrieveData): CancelablePromise<ApiNewsletterPostsRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/newsletter/posts/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * ViewSet for managing newsletter posts with full CRUD operations.
 *
 * Provides:
 * - GET /newsletter/posts/ - List all posts
 * - POST /newsletter/posts/ - Create a new post
 * - GET /newsletter/posts/{id}/ - Retrieve a specific post
 * - PUT /newsletter/posts/{id}/ - Update a specific post (full update)
 * - PATCH /newsletter/posts/{id}/ - Partially update a specific post
 * - DELETE /newsletter/posts/{id}/ - Delete a specific post
 * - GET /newsletter/posts/published/ - List only published posts (public)
 * - GET /newsletter/posts/by-slug/{slug}/ - Retrieve post by slug (public)
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this post.
 * @param data.requestBody
 * @returns Post
 * @throws ApiError
 */
export const apiNewsletterPostsUpdate = (data: ApiNewsletterPostsUpdateData): CancelablePromise<ApiNewsletterPostsUpdateResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/newsletter/posts/{id}/',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * ViewSet for managing newsletter posts with full CRUD operations.
 *
 * Provides:
 * - GET /newsletter/posts/ - List all posts
 * - POST /newsletter/posts/ - Create a new post
 * - GET /newsletter/posts/{id}/ - Retrieve a specific post
 * - PUT /newsletter/posts/{id}/ - Update a specific post (full update)
 * - PATCH /newsletter/posts/{id}/ - Partially update a specific post
 * - DELETE /newsletter/posts/{id}/ - Delete a specific post
 * - GET /newsletter/posts/published/ - List only published posts (public)
 * - GET /newsletter/posts/by-slug/{slug}/ - Retrieve post by slug (public)
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this post.
 * @param data.requestBody
 * @returns Post
 * @throws ApiError
 */
export const apiNewsletterPostsPartialUpdate = (data: ApiNewsletterPostsPartialUpdateData): CancelablePromise<ApiNewsletterPostsPartialUpdateResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/newsletter/posts/{id}/',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * ViewSet for managing newsletter posts with full CRUD operations.
 *
 * Provides:
 * - GET /newsletter/posts/ - List all posts
 * - POST /newsletter/posts/ - Create a new post
 * - GET /newsletter/posts/{id}/ - Retrieve a specific post
 * - PUT /newsletter/posts/{id}/ - Update a specific post (full update)
 * - PATCH /newsletter/posts/{id}/ - Partially update a specific post
 * - DELETE /newsletter/posts/{id}/ - Delete a specific post
 * - GET /newsletter/posts/published/ - List only published posts (public)
 * - GET /newsletter/posts/by-slug/{slug}/ - Retrieve post by slug (public)
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this post.
 * @returns void No response body
 * @throws ApiError
 */
export const apiNewsletterPostsDestroy = (data: ApiNewsletterPostsDestroyData): CancelablePromise<ApiNewsletterPostsDestroyResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/newsletter/posts/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * Public endpoint to retrieve a post by its slug.
 * No authentication required (READ operations don't require permission).
 * @param data The data for the request.
 * @param data.slug
 * @returns Post
 * @throws ApiError
 */
export const apiNewsletterPostsBySlugRetrieve = (data: ApiNewsletterPostsBySlugRetrieveData): CancelablePromise<ApiNewsletterPostsBySlugRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/newsletter/posts/by-slug/{slug}/',
    path: {
        slug: data.slug
    }
}); };

/**
 * Public endpoint to retrieve only published posts.
 * No authentication required.
 * Supports filtering by post type and pinned status via query parameters.
 * @returns Post
 * @throws ApiError
 */
export const apiNewsletterPostsPublishedRetrieve = (): CancelablePromise<ApiNewsletterPostsPublishedRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/newsletter/posts/published/'
}); };

/**
 * @returns Subscriber
 * @throws ApiError
 */
export const apiNewsletterSubscribersList = (): CancelablePromise<ApiNewsletterSubscribersListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/newsletter/subscribers/'
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Subscriber
 * @throws ApiError
 */
export const apiNewsletterSubscribersCreate = (data: ApiNewsletterSubscribersCreateData): CancelablePromise<ApiNewsletterSubscribersCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/newsletter/subscribers/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this order.
 * @returns Order
 * @throws ApiError
 */
export const apiOrderRetrieve = (data: ApiOrderRetrieveData): CancelablePromise<ApiOrderRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/order/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * Retrieves the customer receipt url of an order
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this order.
 * @returns CustomerPortalURL
 * @throws ApiError
 */
export const apiOrderGetCustomerReceiptRetrieve = (data: ApiOrderGetCustomerReceiptRetrieveData): CancelablePromise<ApiOrderGetCustomerReceiptRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/order/{id}/get_customer_receipt/',
    path: {
        id: data.id
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CheckoutURL
 * @throws ApiError
 */
export const apiOrderGetCheckoutUrlCreate = (data: ApiOrderGetCheckoutUrlCreateData): CancelablePromise<ApiOrderGetCheckoutUrlCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/order/get_checkout_url/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Retrieves the current purchase of the given user_id
 * @param data The data for the request.
 * @param data.userId The user id requesting his subscriptions
 * @returns Order
 * @throws ApiError
 */
export const apiOrderGetUserOrderRetrieve = (data: ApiOrderGetUserOrderRetrieveData): CancelablePromise<ApiOrderGetUserOrderRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/order/get_user_order/',
    query: {
        user_id: data.userId
    }
}); };

/**
 * Checks if the user has access depending if he has bought the product
 * @returns HasAccess
 * @throws ApiError
 */
export const apiOrderUserHasAccessRetrieve = (): CancelablePromise<ApiOrderUserHasAccessRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/order/user_has_access/'
}); };

/**
 * @returns Plan
 * @throws ApiError
 */
export const apiPlansList = (): CancelablePromise<ApiPlansListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/plans/'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this plan.
 * @returns Plan
 * @throws ApiError
 */
export const apiPlansRetrieve = (data: ApiPlansRetrieveData): CancelablePromise<ApiPlansRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/plans/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * Get count of subscriptions
 * @returns CountSubscriptions
 * @throws ApiError
 */
export const apiSubscriptionsGetCountSubscriptionsRetrieve = (): CancelablePromise<ApiSubscriptionsGetCountSubscriptionsRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/subscriptions/get_count_subscriptions/'
}); };

/**
 * Subscribe to mailing list
 * Subscribe to the mailing list with an email address.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown
 * @throws ApiError
 */
export const apiSubscriptionsSubscribeCreate = (data: ApiSubscriptionsSubscribeCreateData): CancelablePromise<ApiSubscriptionsSubscribeCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/subscriptions/subscribe/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: ''
    }
}); };

/**
 * @returns Tag
 * @throws ApiError
 */
export const apiTagsList = (): CancelablePromise<ApiTagsListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/tags/'
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Tag
 * @throws ApiError
 */
export const apiTagsCreate = (data: ApiTagsCreateData): CancelablePromise<ApiTagsCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/tags/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.page A page number within the paginated result set.
 * @param data.pageSize Number of results to return per page.
 * @param data.text
 * @returns PaginatedTagList
 * @throws ApiError
 */
export const apiTagsListList = (data: ApiTagsListListData = {}): CancelablePromise<ApiTagsListListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/tags-list/',
    query: {
        page: data.page,
        page_size: data.pageSize,
        text: data.text
    }
}); };

/**
 * Retrieve multiple tags by their IDs
 * @param data The data for the request.
 * @param data.page A page number within the paginated result set.
 * @param data.pageSize Number of results to return per page.
 * @param data.text
 * @param data.requestBody
 * @returns PaginatedTagList
 * @throws ApiError
 */
export const apiTagsListBulkRetrieveCreate = (data: ApiTagsListBulkRetrieveCreateData = {}): CancelablePromise<ApiTagsListBulkRetrieveCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/tags-list/bulk-retrieve/',
    query: {
        page: data.page,
        page_size: data.pageSize,
        text: data.text
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Retrieve the top tags of all the jobs of the week
 * @param data The data for the request.
 * @param data.page A page number within the paginated result set.
 * @param data.pageSize Number of results to return per page.
 * @param data.text
 * @returns PaginatedTagWithFrequencyList
 * @throws ApiError
 */
export const apiTagsListTopTagsList = (data: ApiTagsListTopTagsListData = {}): CancelablePromise<ApiTagsListTopTagsListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/tags-list/top-tags/',
    query: {
        page: data.page,
        page_size: data.pageSize,
        text: data.text
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this tag.
 * @returns Tag
 * @throws ApiError
 */
export const apiTagsRetrieve = (data: ApiTagsRetrieveData): CancelablePromise<ApiTagsRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/tags/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this tag.
 * @param data.requestBody
 * @returns Tag
 * @throws ApiError
 */
export const apiTagsUpdate = (data: ApiTagsUpdateData): CancelablePromise<ApiTagsUpdateResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/tags/{id}/',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this tag.
 * @param data.requestBody
 * @returns Tag
 * @throws ApiError
 */
export const apiTagsPartialUpdate = (data: ApiTagsPartialUpdateData): CancelablePromise<ApiTagsPartialUpdateResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/tags/{id}/',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id A unique integer value identifying this tag.
 * @returns void No response body
 * @throws ApiError
 */
export const apiTagsDestroy = (data: ApiTagsDestroyData): CancelablePromise<ApiTagsDestroyResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/tags/{id}/',
    path: {
        id: data.id
    }
}); };

/**
 * Create multiple tags if they don't exist, or retrieve their IDs if they do.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns TagID
 * @throws ApiError
 */
export const apiTagsCreateTagsCreate = (data: ApiTagsCreateTagsCreateData): CancelablePromise<ApiTagsCreateTagsCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/tags/create_tags/',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Handle the webhook for tally form submission.
 * @returns unknown No response body
 * @throws ApiError
 */
export const apiUsersWebhookCreate = (): CancelablePromise<ApiUsersWebhookCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/users/webhook'
}); };