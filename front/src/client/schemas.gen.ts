// This file is auto-generated by @hey-api/openapi-ts

export const $Category = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        text: {
            type: 'string',
            title: 'Category',
            maxLength: 150
        },
        slug: {
            type: 'string',
            nullable: true,
            maxLength: 50,
            pattern: '^[-a-zA-Z0-9_]+$'
        }
    },
    required: ['id', 'text']
} as const;

export const $CheckoutURL = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            format: 'uri'
        }
    },
    required: ['url']
} as const;

export const $CreateLocation = {
    type: 'object',
    properties: {
        location: {
            type: 'string',
            maxLength: 200
        },
        location_type: {
            type: 'string',
            maxLength: 200
        }
    },
    required: ['location', 'location_type']
} as const;

export const $CreateMultipleLocations = {
    type: 'object',
    properties: {
        locations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateLocation'
            }
        }
    },
    required: ['locations']
} as const;

export const $CreateMultipleTags = {
    type: 'object',
    properties: {
        tags: {
            type: 'array',
            items: {
                type: 'string',
                maxLength: 150
            }
        }
    },
    required: ['tags']
} as const;

export const $CustomRegister = {
    type: 'object',
    properties: {
        username: {
            type: 'string',
            maxLength: 150,
            minLength: 1
        },
        email: {
            type: 'string',
            format: 'email'
        },
        password1: {
            type: 'string',
            writeOnly: true
        },
        password2: {
            type: 'string',
            writeOnly: true
        }
    },
    required: ['email', 'password1', 'password2', 'username']
} as const;

export const $CustomUserDetails = {
    type: 'object',
    description: 'User model w/o password',
    properties: {
        pk: {
            type: 'integer',
            readOnly: true,
            title: 'ID'
        },
        is_staff: {
            type: 'boolean',
            title: 'Staff status',
            description: 'Designates whether the user can log into this admin site.'
        },
        username: {
            type: 'string',
            description: 'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
            pattern: '^[\\w.@+-]+$',
            maxLength: 150
        },
        email: {
            type: 'string',
            format: 'email',
            readOnly: true,
            title: 'Email address'
        },
        first_name: {
            type: 'string',
            maxLength: 150
        },
        last_name: {
            type: 'string',
            maxLength: 150
        }
    },
    required: ['email', 'pk', 'username']
} as const;

export const $CustomerPortalURL = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            format: 'uri'
        }
    },
    required: ['url']
} as const;

export const $GetCheckoutURLRequest = {
    type: 'object',
    properties: {
        receipt_button_text: {
            type: 'string',
            default: 'Go to Dashboard',
            maxLength: 100
        },
        receipt_thank_you_note: {
            type: 'string',
            default: 'Thank you for sign up to the plan!',
            maxLength: 500
        },
        redirect_url: {
            type: 'string',
            format: 'uri'
        },
        embed: {
            type: 'boolean',
            default: false
        },
        email: {
            type: 'string',
            format: 'email'
        },
        user_id: {
            type: 'integer'
        },
        variant_id: {
            type: 'integer'
        },
        job_id: {
            type: 'integer'
        }
    },
    required: ['email', 'job_id', 'redirect_url', 'user_id', 'variant_id']
} as const;

export const $HasAccess = {
    type: 'object',
    properties: {
        has_access: {
            type: 'boolean'
        }
    },
    required: ['has_access']
} as const;

export const $JWT = {
    type: 'object',
    description: 'Serializer for JWT authentication.',
    properties: {
        access: {
            type: 'string'
        },
        refresh: {
            type: 'string'
        },
        user: {
            '$ref': '#/components/schemas/CustomUserDetails'
        }
    },
    required: ['access', 'refresh', 'user']
} as const;

export const $Job = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        company_name: {
            type: 'string',
            maxLength: 150
        },
        title: {
            type: 'string',
            maxLength: 150
        },
        slug: {
            type: 'string',
            nullable: true,
            maxLength: 255,
            pattern: '^[-a-zA-Z0-9_]+$'
        },
        description: {
            type: 'string'
        },
        remote: {
            type: 'boolean'
        },
        apply_url: {
            type: 'string',
            format: 'uri',
            nullable: true,
            maxLength: 2048
        },
        apply_by_email: {
            type: 'boolean'
        },
        apply_email: {
            type: 'string',
            format: 'email',
            nullable: true,
            title: 'Apply E-mail',
            maxLength: 254
        },
        company_email: {
            type: 'string',
            format: 'email',
            title: 'Company Email (For Invoice)',
            maxLength: 254
        },
        pin_on_top: {
            type: 'boolean',
            title: 'Pin on top (30 days)'
        },
        verified: {
            type: 'boolean'
        },
        visible: {
            type: 'boolean'
        },
        user: {
            type: 'integer',
            nullable: true
        },
        tags: {
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        location: {
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        category: {
            type: 'array',
            items: {
                type: 'integer'
            }
        }
    },
    required: ['category', 'company_email', 'company_name', 'created_at', 'description', 'id', 'location', 'tags', 'title', 'updated_at']
} as const;

export const $JobList = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        title: {
            type: 'string',
            maxLength: 150
        },
        company_name: {
            type: 'string',
            maxLength: 150
        },
        tags: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tag'
            }
        },
        verified: {
            type: 'boolean'
        },
        location: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Location'
            }
        },
        category: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Category'
            }
        },
        slug: {
            type: 'string',
            nullable: true,
            maxLength: 255,
            pattern: '^[-a-zA-Z0-9_]+$'
        }
    },
    required: ['category', 'company_name', 'id', 'location', 'tags', 'title']
} as const;

export const $JobRetrieve = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        tags: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tag'
            }
        },
        location: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Location'
            }
        },
        category: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Category'
            }
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        company_name: {
            type: 'string',
            maxLength: 150
        },
        title: {
            type: 'string',
            maxLength: 150
        },
        slug: {
            type: 'string',
            nullable: true,
            maxLength: 255,
            pattern: '^[-a-zA-Z0-9_]+$'
        },
        description: {
            type: 'string'
        },
        remote: {
            type: 'boolean'
        },
        apply_url: {
            type: 'string',
            format: 'uri',
            nullable: true,
            maxLength: 2048
        },
        apply_by_email: {
            type: 'boolean'
        },
        apply_email: {
            type: 'string',
            format: 'email',
            nullable: true,
            title: 'Apply E-mail',
            maxLength: 254
        },
        company_email: {
            type: 'string',
            format: 'email',
            title: 'Company Email (For Invoice)',
            maxLength: 254
        },
        pin_on_top: {
            type: 'boolean',
            title: 'Pin on top (30 days)'
        },
        verified: {
            type: 'boolean'
        },
        visible: {
            type: 'boolean'
        },
        user: {
            type: 'integer',
            nullable: true
        }
    },
    required: ['category', 'company_email', 'company_name', 'created_at', 'description', 'id', 'location', 'tags', 'title', 'updated_at']
} as const;

export const $Location = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        location: {
            type: 'string',
            maxLength: 200
        },
        location_type: {
            '$ref': '#/components/schemas/LocationTypeEnum'
        },
        rank: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64',
            nullable: true
        }
    },
    required: ['id', 'location', 'location_type']
} as const;

export const $LocationID = {
    type: 'object',
    properties: {
        id: {
            type: 'integer'
        }
    },
    required: ['id']
} as const;

export const $LocationTypeEnum = {
    enum: ['remote', 'region', 'country', 'city'],
    type: 'string',
    description: `* \`remote\` - Remote
* \`region\` - Region
* \`country\` - Country
* \`city\` - City`
} as const;

export const $Login = {
    type: 'object',
    properties: {
        username: {
            type: 'string'
        },
        email: {
            type: 'string',
            format: 'email'
        },
        password: {
            type: 'string'
        }
    },
    required: ['password']
} as const;

export const $Order = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        lemonsqueezy_id: {
            type: 'string',
            title: 'Lemon Squeezy Id',
            maxLength: 255
        },
        order_id: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: -9223372036854776000,
            format: 'int64'
        },
        order_number: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: -9223372036854776000,
            format: 'int64'
        },
        name: {
            type: 'string',
            maxLength: 255
        },
        email: {
            type: 'string',
            maxLength: 255
        },
        status: {
            type: 'string',
            maxLength: 50
        },
        status_formatted: {
            type: 'string',
            maxLength: 100
        },
        refunded: {
            type: 'boolean'
        },
        refunded_at: {
            type: 'string',
            maxLength: 100
        },
        price: {
            type: 'string',
            maxLength: 30
        },
        receipt: {
            type: 'string',
            nullable: true,
            maxLength: 500
        },
        order_item_id: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: -9223372036854776000,
            format: 'int64',
            nullable: true
        },
        user: {
            type: 'integer',
            nullable: true
        },
        plan: {
            type: 'integer',
            nullable: true
        }
    },
    required: ['email', 'id', 'lemonsqueezy_id', 'name', 'order_id', 'order_number', 'refunded_at', 'status', 'status_formatted']
} as const;

export const $PaginatedJobListList = {
    type: 'object',
    required: ['count', 'results'],
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/JobList'
            }
        }
    }
} as const;

export const $PaginatedLocationList = {
    type: 'object',
    required: ['count', 'results'],
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Location'
            }
        }
    }
} as const;

export const $PaginatedTagList = {
    type: 'object',
    required: ['count', 'results'],
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=4'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?page=2'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tag'
            }
        }
    }
} as const;

export const $PatchedCategory = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        text: {
            type: 'string',
            title: 'Category',
            maxLength: 150
        },
        slug: {
            type: 'string',
            nullable: true,
            maxLength: 50,
            pattern: '^[-a-zA-Z0-9_]+$'
        }
    }
} as const;

export const $PatchedCustomUserDetails = {
    type: 'object',
    description: 'User model w/o password',
    properties: {
        pk: {
            type: 'integer',
            readOnly: true,
            title: 'ID'
        },
        is_staff: {
            type: 'boolean',
            title: 'Staff status',
            description: 'Designates whether the user can log into this admin site.'
        },
        username: {
            type: 'string',
            description: 'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
            pattern: '^[\\w.@+-]+$',
            maxLength: 150
        },
        email: {
            type: 'string',
            format: 'email',
            readOnly: true,
            title: 'Email address'
        },
        first_name: {
            type: 'string',
            maxLength: 150
        },
        last_name: {
            type: 'string',
            maxLength: 150
        }
    }
} as const;

export const $PatchedJob = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        company_name: {
            type: 'string',
            maxLength: 150
        },
        title: {
            type: 'string',
            maxLength: 150
        },
        slug: {
            type: 'string',
            nullable: true,
            maxLength: 255,
            pattern: '^[-a-zA-Z0-9_]+$'
        },
        description: {
            type: 'string'
        },
        remote: {
            type: 'boolean'
        },
        apply_url: {
            type: 'string',
            format: 'uri',
            nullable: true,
            maxLength: 2048
        },
        apply_by_email: {
            type: 'boolean'
        },
        apply_email: {
            type: 'string',
            format: 'email',
            nullable: true,
            title: 'Apply E-mail',
            maxLength: 254
        },
        company_email: {
            type: 'string',
            format: 'email',
            title: 'Company Email (For Invoice)',
            maxLength: 254
        },
        pin_on_top: {
            type: 'boolean',
            title: 'Pin on top (30 days)'
        },
        verified: {
            type: 'boolean'
        },
        visible: {
            type: 'boolean'
        },
        user: {
            type: 'integer',
            nullable: true
        },
        tags: {
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        location: {
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        category: {
            type: 'array',
            items: {
                type: 'integer'
            }
        }
    }
} as const;

export const $PatchedLocation = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        location: {
            type: 'string',
            maxLength: 200
        },
        location_type: {
            '$ref': '#/components/schemas/LocationTypeEnum'
        },
        rank: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: 0,
            format: 'int64',
            nullable: true
        }
    }
} as const;

export const $PatchedTag = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        text: {
            type: 'string',
            title: 'Tag',
            maxLength: 150
        }
    }
} as const;

export const $Plan = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        product_id: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: -9223372036854776000,
            format: 'int64'
        },
        product_name: {
            type: 'string',
            maxLength: 255
        },
        variant_id: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: -9223372036854776000,
            format: 'int64'
        },
        category: {
            type: 'string',
            maxLength: 30
        },
        name: {
            type: 'string',
            maxLength: 255
        },
        description: {
            type: 'string',
            title: 'Variant description'
        },
        price: {
            type: 'string',
            maxLength: 30
        },
        is_usage_based: {
            type: 'boolean'
        },
        interval: {
            type: 'string',
            maxLength: 10
        },
        interval_count: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: -9223372036854776000,
            format: 'int64'
        },
        trial_interval: {
            type: 'string',
            nullable: true,
            maxLength: 10
        },
        trial_interval_count: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: -9223372036854776000,
            format: 'int64',
            nullable: true
        },
        sort: {
            type: 'integer',
            maximum: 9223372036854776000,
            minimum: -9223372036854776000,
            format: 'int64'
        }
    },
    required: ['category', 'description', 'id', 'interval', 'interval_count', 'name', 'price', 'product_id', 'product_name', 'sort', 'variant_id']
} as const;

export const $RestAuthDetail = {
    type: 'object',
    properties: {
        detail: {
            type: 'string',
            readOnly: true
        }
    },
    required: ['detail']
} as const;

export const $SocialLogin = {
    type: 'object',
    properties: {
        access_token: {
            type: 'string'
        },
        code: {
            type: 'string'
        },
        id_token: {
            type: 'string'
        }
    }
} as const;

export const $Subscribe = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            format: 'email'
        }
    },
    required: ['email']
} as const;

export const $Tag = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        text: {
            type: 'string',
            title: 'Tag',
            maxLength: 150
        }
    },
    required: ['id', 'text']
} as const;

export const $TagID = {
    type: 'object',
    properties: {
        id: {
            type: 'integer'
        }
    },
    required: ['id']
} as const;

export const $TokenRefresh = {
    type: 'object',
    properties: {
        access: {
            type: 'string',
            readOnly: true
        },
        refresh: {
            type: 'string',
            writeOnly: true
        }
    },
    required: ['access', 'refresh']
} as const;

export const $TokenVerify = {
    type: 'object',
    properties: {
        token: {
            type: 'string',
            writeOnly: true
        }
    },
    required: ['token']
} as const;

export const $VerifyEmail = {
    type: 'object',
    properties: {
        key: {
            type: 'string',
            writeOnly: true
        }
    },
    required: ['key']
} as const;